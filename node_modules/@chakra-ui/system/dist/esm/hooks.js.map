{"version":3,"sources":["../../src/hooks.ts"],"names":["useColorMode","filterUndefined","mergeWith","runIfFn","useMemo","useRef","isEqual","useTheme","omitThemingProps","useChakra","colorModeResult","theme","resolveTokenValue","tokenValue","fallbackValue","getValue","val","__cssMap","value","useToken","scale","token","fallback","Array","isArray","fallbackArr","map","index","path","useProps","themeKey","props","colorMode","styleConfig","components","defaultProps","propsWithDefault","stylesRef","mergedProps","memoizedStyles","baseStyles","baseStyle","variants","variant","sizes","size","styles","parts","forEach","part","isStyleEqual","current"],"mappings":"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","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  Dict,\n  filterUndefined,\n  mergeWith,\n  runIfFn,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport { useMemo, useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useTheme } from \"./providers\"\nimport { ThemingProps } from \"./system.types\"\nimport { omitThemingProps } from \"./system.utils\"\n\nexport function useChakra<T extends Dict = Dict>() {\n  const colorModeResult = useColorMode()\n  const theme = useTheme() as T\n  return { ...colorModeResult, theme }\n}\n\n// inspired from ./css.ts : resolveTokenValue\nconst resolveTokenValue = <T extends StringOrNumber>(\n  theme: Dict,\n  tokenValue: T,\n  fallbackValue: any,\n) => {\n  if (tokenValue == null) return tokenValue\n  const getValue = (val: T) => theme.__cssMap?.[val]?.value\n  return getValue(tokenValue) ?? getValue(fallbackValue) ?? fallbackValue\n}\n\nexport function useToken<T extends StringOrNumber>(\n  scale: string,\n  token: T | T[],\n  fallback?: T | T[],\n) {\n  const theme = useTheme()\n\n  if (Array.isArray(token)) {\n    let fallbackArr: T[] = []\n    if (fallback) {\n      fallbackArr = Array.isArray(fallback) ? fallback : [fallback]\n    }\n\n    return token.map((token, index) => {\n      const path = `${scale}.${token}`\n      return resolveTokenValue(theme, path, fallbackArr[index] ?? token)\n    })\n  }\n\n  const path = `${scale}.${token}`\n  return resolveTokenValue(theme, path, fallback)\n}\n\nexport function useProps<P extends ThemingProps>(\n  themeKey: string,\n  props: P,\n  isMulti: true,\n): {\n  styles: Record<string, SystemStyleObject>\n  props: Omit<P, keyof ThemingProps>\n}\n\nexport function useProps<P extends ThemingProps>(\n  themeKey: string,\n  props?: P,\n  isMulti?: boolean,\n): {\n  styles: SystemStyleObject\n  props: Omit<P, keyof ThemingProps>\n}\n\nexport function useProps(themeKey: string, props: Dict) {\n  const { theme, colorMode } = useChakra()\n\n  const styleConfig = (props.styleConfig || theme.components?.[themeKey]) as\n    | Dict\n    | undefined\n\n  const defaultProps = styleConfig?.defaultProps ?? {}\n  const propsWithDefault = { ...defaultProps, ...filterUndefined(props) }\n\n  const stylesRef = useRef<Dict>({})\n\n  const mergedProps = mergeWith({}, propsWithDefault, { theme, colorMode })\n\n  const memoizedStyles = useMemo(() => {\n    if (styleConfig) {\n      const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, mergedProps)\n\n      const variants = runIfFn(\n        styleConfig.variants?.[mergedProps.variant as string] ?? {},\n        mergedProps,\n      )\n\n      const sizes = runIfFn(\n        styleConfig.sizes?.[mergedProps.size as string] ?? {},\n        mergedProps,\n      )\n\n      const styles = mergeWith(baseStyles, sizes, variants)\n\n      if (styleConfig.parts) {\n        styleConfig.parts.forEach((part: string) => {\n          styles[part] = styles[part] ?? {}\n        })\n      }\n\n      const isStyleEqual = isEqual(stylesRef.current, styles)\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles\n      }\n    }\n\n    return stylesRef.current\n  }, [styleConfig, mergedProps])\n\n  return {\n    styles: memoizedStyles,\n    props: omitThemingProps(propsWithDefault),\n  }\n}\n"],"file":"hooks.js"}