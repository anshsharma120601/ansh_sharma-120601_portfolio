{"version":3,"sources":["../../src/use-disclosure.ts"],"names":["callAllHandlers","React","useControllableProp","useId","useCallbackRef","useDisclosure","props","onClose","onCloseProp","onOpen","onOpenProp","isOpen","isOpenProp","id","idProp","onOpenPropCallbackRef","onClosePropCallbackRef","isOpenState","setIsOpen","useState","defaultIsOpen","isControlled","useCallback","onToggle","action","getButtonProps","onClick","getDisclosureProps","hidden"],"mappings":";;AAAA,SAASA,eAAT,QAAgC,kBAAhC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AAUA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAAuD;AAAA,MAAhCA,KAAgC;AAAhCA,IAAAA,KAAgC,GAAJ,EAAI;AAAA;;AAC5D,MAAM;AACJC,IAAAA,OAAO,EAAEC,WADL;AAEJC,IAAAA,MAAM,EAAEC,UAFJ;AAGJC,IAAAA,MAAM,EAAEC,UAHJ;AAIJC,IAAAA,EAAE,EAAEC;AAJA,MAKFR,KALJ;AAOA,MAAMS,qBAAqB,GAAGX,cAAc,CAACM,UAAD,CAA5C;AACA,MAAMM,sBAAsB,GAAGZ,cAAc,CAACI,WAAD,CAA7C;AACA,MAAM,CAACS,WAAD,EAAcC,SAAd,IAA2BjB,KAAK,CAACkB,QAAN,CAAeb,KAAK,CAACc,aAAN,IAAuB,KAAtC,CAAjC;AACA,MAAM,CAACC,YAAD,EAAeV,MAAf,IAAyBT,mBAAmB,CAACU,UAAD,EAAaK,WAAb,CAAlD;AAEA,MAAMJ,EAAE,GAAGV,KAAK,CAACW,MAAD,EAAS,YAAT,CAAhB;AAEA,MAAMP,OAAO,GAAGN,KAAK,CAACqB,WAAN,CAAkB,MAAM;AACtC,QAAI,CAACD,YAAL,EAAmB;AACjBH,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD;;AACDF,IAAAA,sBAAsB,QAAtB,YAAAA,sBAAsB;AACvB,GALe,EAKb,CAACK,YAAD,EAAeL,sBAAf,CALa,CAAhB;AAOA,MAAMP,MAAM,GAAGR,KAAK,CAACqB,WAAN,CAAkB,MAAM;AACrC,QAAI,CAACD,YAAL,EAAmB;AACjBH,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AACDH,IAAAA,qBAAqB,QAArB,YAAAA,qBAAqB;AACtB,GALc,EAKZ,CAACM,YAAD,EAAeN,qBAAf,CALY,CAAf;AAOA,MAAMQ,QAAQ,GAAGtB,KAAK,CAACqB,WAAN,CAAkB,MAAM;AACvC,QAAME,MAAM,GAAGb,MAAM,GAAGJ,OAAH,GAAaE,MAAlC;AACAe,IAAAA,MAAM;AACP,GAHgB,EAGd,CAACb,MAAD,EAASF,MAAT,EAAiBF,OAAjB,CAHc,CAAjB;AAKA,SAAO;AACLI,IAAAA,MAAM,EAAE,CAAC,CAACA,MADL;AAELF,IAAAA,MAFK;AAGLF,IAAAA,OAHK;AAILgB,IAAAA,QAJK;AAKLF,IAAAA,YALK;AAMLI,IAAAA,cAAc,EAAE,wBAACnB,KAAD;AAAA,UAACA,KAAD;AAACA,QAAAA,KAAD,GAAc,EAAd;AAAA;;AAAA,0BACXA,KADW;AAEd,yBAAiB,MAFH;AAGd,yBAAiBO,EAHH;AAIda,QAAAA,OAAO,EAAE1B,eAAe,CAACM,KAAK,CAACoB,OAAP,EAAgBH,QAAhB;AAJV;AAAA,KANX;AAYLI,IAAAA,kBAAkB,EAAE,4BAACrB,KAAD;AAAA,UAACA,KAAD;AAACA,QAAAA,KAAD,GAAc,EAAd;AAAA;;AAAA,0BACfA,KADe;AAElBsB,QAAAA,MAAM,EAAE,CAACjB,MAFS;AAGlBE,QAAAA;AAHkB;AAAA;AAZf,GAAP;AAkBD","sourcesContent":["import { callAllHandlers } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useControllableProp } from \"./use-controllable\"\nimport { useId } from \"./use-id\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const onOpenPropCallbackRef = useCallbackRef(onOpenProp)\n  const onClosePropCallbackRef = useCallbackRef(onCloseProp)\n  const [isOpenState, setIsOpen] = React.useState(props.defaultIsOpen || false)\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState)\n\n  const id = useId(idProp, \"disclosure\")\n\n  const onClose = React.useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    onClosePropCallbackRef?.()\n  }, [isControlled, onClosePropCallbackRef])\n\n  const onOpen = React.useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    onOpenPropCallbackRef?.()\n  }, [isControlled, onOpenPropCallbackRef])\n\n  const onToggle = React.useCallback(() => {\n    const action = isOpen ? onClose : onOpen\n    action()\n  }, [isOpen, onOpen, onClose])\n\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: (props: any = {}) => ({\n      ...props,\n      \"aria-expanded\": \"true\",\n      \"aria-controls\": id,\n      onClick: callAllHandlers(props.onClick, onToggle),\n    }),\n    getDisclosureProps: (props: any = {}) => ({\n      ...props,\n      hidden: !isOpen,\n      id,\n    }),\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"],"file":"use-disclosure.js"}