{"version":3,"sources":["../../src/color-mode-provider.tsx"],"names":["useEnvironment","isBrowser","noop","__DEV__","React","addListener","getColorScheme","root","syncBodyClassName","localStorageManager","ColorModeContext","createContext","displayName","useColorMode","context","useContext","undefined","Error","ColorModeProvider","props","value","children","options","useSystemColorMode","initialColorMode","colorModeManager","defaultColorMode","colorMode","rawSetColorMode","useState","type","get","document","useEffect","mode","isDark","set","setColorMode","useCallback","isListenerEvent","toggleColorMode","shouldUseSystemListener","removeListener","useMemo","DarkMode","LightMode","useColorModeValue","light","dark"],"mappings":"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","sourcesContent":["import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { isBrowser, noop, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  addListener,\n  ColorMode,\n  getColorScheme,\n  root,\n  syncBodyClassName,\n} from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\ntype ConfigColorMode = ColorMode | \"system\" | undefined\nexport type { ColorMode, ConfigColorMode }\n\nexport interface ColorModeOptions {\n  initialColorMode?: ConfigColorMode\n  useSystemColorMode?: boolean\n}\n\ninterface ColorModeContextType {\n  colorMode: ColorMode\n  toggleColorMode: () => void\n  setColorMode: (value: any) => void\n}\n\nexport const ColorModeContext = React.createContext({} as ColorModeContextType)\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\"\n}\n\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\nexport const useColorMode = () => {\n  const context = React.useContext(ColorModeContext)\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\")\n  }\n  return context\n}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: { useSystemColorMode, initialColorMode },\n    colorModeManager = localStorageManager,\n  } = props\n\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\"\n\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n  const [colorMode, rawSetColorMode] = React.useState<ColorMode | undefined>(\n    colorModeManager.type === \"cookie\"\n      ? colorModeManager.get(defaultColorMode)\n      : defaultColorMode,\n  )\n\n  const { document } = useEnvironment()\n\n  React.useEffect(() => {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     *\n     * Priority:\n     * - system color mode\n     * - defined value on <ColorModeScript />, if present\n     * - previously stored value\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      const mode = useSystemColorMode\n        ? getColorScheme(defaultColorMode)\n        : root.get() ||\n          colorModeManager.get() ||\n          getColorScheme(defaultColorMode)\n\n      if (mode) {\n        rawSetColorMode(mode)\n      }\n    }\n  }, [colorModeManager, useSystemColorMode, defaultColorMode])\n\n  React.useEffect(() => {\n    const isDark = colorMode === \"dark\"\n\n    syncBodyClassName(isDark, document)\n    root.set(isDark ? \"dark\" : \"light\")\n  }, [colorMode, document])\n\n  const setColorMode = React.useCallback(\n    (value: ColorMode, isListenerEvent = false) => {\n      if (!isListenerEvent) {\n        colorModeManager.set(value)\n      } else if (colorModeManager.get() && !useSystemColorMode) return\n\n      rawSetColorMode(value)\n    },\n    [colorModeManager, useSystemColorMode],\n  )\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\")\n  }, [colorMode, setColorMode])\n\n  React.useEffect(() => {\n    const shouldUseSystemListener =\n      useSystemColorMode || initialColorMode === \"system\"\n    let removeListener: any\n    if (shouldUseSystemListener) {\n      removeListener = addListener(setColorMode)\n    }\n    return () => {\n      if (removeListener && shouldUseSystemListener) {\n        removeListener()\n      }\n    }\n  }, [setColorMode, useSystemColorMode, initialColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = React.useMemo(\n    () => ({\n      colorMode: (value ?? colorMode) as ColorMode,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n    }),\n    [colorMode, setColorMode, toggleColorMode, value],\n  )\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\"\n}\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport const DarkMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"dark\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\"\n}\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport const LightMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"light\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\"\n}\n\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\nexport function useColorModeValue<TLight = unknown, TDark = unknown>(\n  light: TLight,\n  dark: TDark,\n) {\n  const { colorMode } = useColorMode()\n  return colorMode === \"dark\" ? dark : light\n}\n"],"file":"color-mode-provider.js"}