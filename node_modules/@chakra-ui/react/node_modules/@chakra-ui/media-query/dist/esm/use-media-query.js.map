{"version":3,"sources":["../../src/use-media-query.ts"],"names":["useEnvironment","isBrowser","React","useSafeLayoutEffect","useLayoutEffect","useEffect","useMediaQuery","query","env","queries","Array","isArray","isSupported","window","matches","setMatches","useState","map","matchMedia","undefined","mediaQueryList","listenerList","listener","isEqual","prev","curr","length","every","elem","idx","currentMatches","mediaQuery","addEventListener","forEach","_","index","removeEventListener"],"mappings":"AAAA,SAASA,cAAT,QAA+B,sBAA/B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,IAAMC,mBAAmB,GAAGF,SAAS,GAAGC,KAAK,CAACE,eAAT,GAA2BF,KAAK,CAACG,SAAtE;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA4D;AACjE,MAAMC,GAAG,GAAGR,cAAc,EAA1B;AACA,MAAMS,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcJ,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAA/C;AACA,MAAMK,WAAW,GAAGX,SAAS,IAAI,gBAAgBO,GAAG,CAACK,MAArD;AAEA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBb,KAAK,CAACc,QAAN,CAC5BP,OAAO,CAACQ,GAAR,CAAaV,KAAD,IACVK,WAAW,GAAG,CAAC,CAACJ,GAAG,CAACK,MAAJ,CAAWK,UAAX,CAAsBX,KAAtB,EAA6BO,OAAlC,GAA4C,KADzD,CAD4B,CAA9B;AAMAX,EAAAA,mBAAmB,CAAC,MAAM;AACxB,QAAI,CAACS,WAAL,EAAkB,OAAOO,SAAP;AAElB,QAAMC,cAAc,GAAGX,OAAO,CAACQ,GAAR,CAAaV,KAAD,IAAWC,GAAG,CAACK,MAAJ,CAAWK,UAAX,CAAsBX,KAAtB,CAAvB,CAAvB;AAEA,QAAMc,YAAY,GAAGD,cAAc,CAACH,GAAf,CAAmB,MAAM;AAC5C,UAAMK,QAAQ,GAAG,MAAM;AACrB,YAAMC,OAAO,GAAG,CAACC,IAAD,EAAkBC,IAAlB,KACdD,IAAI,CAACE,MAAL,KAAgBD,IAAI,CAACC,MAArB,IACAF,IAAI,CAACG,KAAL,CAAW,CAACC,IAAD,EAAOC,GAAP,KAAeD,IAAI,KAAKH,IAAI,CAACI,GAAD,CAAvC,CAFF;;AAIA,YAAMC,cAAc,GAAGV,cAAc,CAACH,GAAf,CACpBc,UAAD,IAAgBA,UAAU,CAACjB,OADN,CAAvB;;AAIA,YAAI,CAACS,OAAO,CAACT,OAAD,EAAUgB,cAAV,CAAZ,EAAuC;AACrCf,UAAAA,UAAU,CAACe,cAAD,CAAV;AACD;AACF,OAZD;;AAcAtB,MAAAA,GAAG,CAACK,MAAJ,CAAWmB,gBAAX,CAA4B,QAA5B,EAAsCV,QAAtC;AAEA,aAAOA,QAAP;AACD,KAlBoB,CAArB;AAoBA,WAAO,MAAM;AACXF,MAAAA,cAAc,CAACa,OAAf,CAAuB,CAACC,CAAD,EAAIC,KAAJ,KAAc;AACnC3B,QAAAA,GAAG,CAACK,MAAJ,CAAWuB,mBAAX,CAA+B,QAA/B,EAAyCf,YAAY,CAACc,KAAD,CAArD;AACD,OAFD;AAGD,KAJD;AAKD,GA9BkB,EA8BhB,CAAC5B,KAAD,CA9BgB,CAAnB;AAgCA,SAAOO,OAAP;AACD","sourcesContent":["import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { isBrowser } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nconst useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\nexport function useMediaQuery(query: string | string[]): boolean[] {\n  const env = useEnvironment()\n  const queries = Array.isArray(query) ? query : [query]\n  const isSupported = isBrowser && \"matchMedia\" in env.window\n\n  const [matches, setMatches] = React.useState(\n    queries.map((query) =>\n      isSupported ? !!env.window.matchMedia(query).matches : false,\n    ),\n  )\n\n  useSafeLayoutEffect(() => {\n    if (!isSupported) return undefined\n\n    const mediaQueryList = queries.map((query) => env.window.matchMedia(query))\n\n    const listenerList = mediaQueryList.map(() => {\n      const listener = () => {\n        const isEqual = (prev: boolean[], curr: boolean[]) =>\n          prev.length === curr.length &&\n          prev.every((elem, idx) => elem === curr[idx])\n\n        const currentMatches = mediaQueryList.map(\n          (mediaQuery) => mediaQuery.matches,\n        )\n\n        if (!isEqual(matches, currentMatches)) {\n          setMatches(currentMatches)\n        }\n      }\n\n      env.window.addEventListener(\"resize\", listener)\n\n      return listener\n    })\n\n    return () => {\n      mediaQueryList.forEach((_, index) => {\n        env.window.removeEventListener(\"resize\", listenerList[index])\n      })\n    }\n  }, [query])\n\n  return matches\n}\n"],"file":"use-media-query.js"}