import { useEnvironment } from "@chakra-ui/react-env";
import { isBrowser } from "@chakra-ui/utils";
import * as React from "react";
var useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;
/**
 * React hook that tracks state of a CSS media query
 *
 * @param query the media query to match
 */

export function useMediaQuery(query) {
  var env = useEnvironment();
  var queries = Array.isArray(query) ? query : [query];
  var isSupported = isBrowser && "matchMedia" in env.window;
  var [matches, setMatches] = React.useState(queries.map(query => isSupported ? !!env.window.matchMedia(query).matches : false));
  useSafeLayoutEffect(() => {
    if (!isSupported) return undefined;
    var mediaQueryList = queries.map(query => env.window.matchMedia(query));
    var listenerList = mediaQueryList.map(() => {
      var listener = () => {
        var isEqual = (prev, curr) => prev.length === curr.length && prev.every((elem, idx) => elem === curr[idx]);

        var currentMatches = mediaQueryList.map(mediaQuery => mediaQuery.matches);

        if (!isEqual(matches, currentMatches)) {
          setMatches(currentMatches);
        }
      };

      env.window.addEventListener("resize", listener);
      return listener;
    });
    return () => {
      mediaQueryList.forEach((_, index) => {
        env.window.removeEventListener("resize", listenerList[index]);
      });
    };
  }, [query]);
  return matches;
}
//# sourceMappingURL=use-media-query.js.map