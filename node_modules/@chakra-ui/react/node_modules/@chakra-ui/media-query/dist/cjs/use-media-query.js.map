{"version":3,"sources":["../../src/use-media-query.ts"],"names":["useSafeLayoutEffect","isBrowser","React","useLayoutEffect","useEffect","useMediaQuery","query","env","queries","Array","isArray","isSupported","window","useState","map","matchMedia","matches","setMatches","undefined","mediaQueryList","listenerList","listener","isEqual","prev","curr","length","every","elem","idx","currentMatches","mediaQuery","addEventListener","forEach","_","index","removeEventListener"],"mappings":";;;;;AAAA;;AACA;;AACA;;;;;;AAEA,IAAMA,mBAAmB,GAAGC,mBAAYC,KAAK,CAACC,eAAlB,GAAoCD,KAAK,CAACE,SAAtE;AAEA;AACA;AACA;AACA;AACA;;AACO,SAASC,aAAT,CAAuBC,KAAvB,EAA4D;AACjE,MAAMC,GAAG,GAAG,+BAAZ;AACA,MAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcJ,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAA/C;AACA,MAAMK,WAAW,GAAGV,oBAAa,gBAAgBM,GAAG,CAACK,MAArD;;AAHiE,wBAKnCV,KAAK,CAACW,QAAN,CAC5BL,OAAO,CAACM,GAAR,CAAY,UAACR,KAAD;AAAA,WACVK,WAAW,GAAG,CAAC,CAACJ,GAAG,CAACK,MAAJ,CAAWG,UAAX,CAAsBT,KAAtB,EAA6BU,OAAlC,GAA4C,KAD7C;AAAA,GAAZ,CAD4B,CALmC;AAAA,MAK1DA,OAL0D;AAAA,MAKjDC,UALiD;;AAWjEjB,EAAAA,mBAAmB,CAAC,YAAM;AACxB,QAAI,CAACW,WAAL,EAAkB,OAAOO,SAAP;AAElB,QAAMC,cAAc,GAAGX,OAAO,CAACM,GAAR,CAAY,UAACR,KAAD;AAAA,aAAWC,GAAG,CAACK,MAAJ,CAAWG,UAAX,CAAsBT,KAAtB,CAAX;AAAA,KAAZ,CAAvB;AAEA,QAAMc,YAAY,GAAGD,cAAc,CAACL,GAAf,CAAmB,YAAM;AAC5C,UAAMO,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,YAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAkBC,IAAlB;AAAA,iBACdD,IAAI,CAACE,MAAL,KAAgBD,IAAI,CAACC,MAArB,IACAF,IAAI,CAACG,KAAL,CAAW,UAACC,IAAD,EAAOC,GAAP;AAAA,mBAAeD,IAAI,KAAKH,IAAI,CAACI,GAAD,CAA5B;AAAA,WAAX,CAFc;AAAA,SAAhB;;AAIA,YAAMC,cAAc,GAAGV,cAAc,CAACL,GAAf,CACrB,UAACgB,UAAD;AAAA,iBAAgBA,UAAU,CAACd,OAA3B;AAAA,SADqB,CAAvB;;AAIA,YAAI,CAACM,OAAO,CAACN,OAAD,EAAUa,cAAV,CAAZ,EAAuC;AACrCZ,UAAAA,UAAU,CAACY,cAAD,CAAV;AACD;AACF,OAZD;;AAcAtB,MAAAA,GAAG,CAACK,MAAJ,CAAWmB,gBAAX,CAA4B,QAA5B,EAAsCV,QAAtC;AAEA,aAAOA,QAAP;AACD,KAlBoB,CAArB;AAoBA,WAAO,YAAM;AACXF,MAAAA,cAAc,CAACa,OAAf,CAAuB,UAACC,CAAD,EAAIC,KAAJ,EAAc;AACnC3B,QAAAA,GAAG,CAACK,MAAJ,CAAWuB,mBAAX,CAA+B,QAA/B,EAAyCf,YAAY,CAACc,KAAD,CAArD;AACD,OAFD;AAGD,KAJD;AAKD,GA9BkB,EA8BhB,CAAC5B,KAAD,CA9BgB,CAAnB;AAgCA,SAAOU,OAAP;AACD","sourcesContent":["import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { isBrowser } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nconst useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\nexport function useMediaQuery(query: string | string[]): boolean[] {\n  const env = useEnvironment()\n  const queries = Array.isArray(query) ? query : [query]\n  const isSupported = isBrowser && \"matchMedia\" in env.window\n\n  const [matches, setMatches] = React.useState(\n    queries.map((query) =>\n      isSupported ? !!env.window.matchMedia(query).matches : false,\n    ),\n  )\n\n  useSafeLayoutEffect(() => {\n    if (!isSupported) return undefined\n\n    const mediaQueryList = queries.map((query) => env.window.matchMedia(query))\n\n    const listenerList = mediaQueryList.map(() => {\n      const listener = () => {\n        const isEqual = (prev: boolean[], curr: boolean[]) =>\n          prev.length === curr.length &&\n          prev.every((elem, idx) => elem === curr[idx])\n\n        const currentMatches = mediaQueryList.map(\n          (mediaQuery) => mediaQuery.matches,\n        )\n\n        if (!isEqual(matches, currentMatches)) {\n          setMatches(currentMatches)\n        }\n      }\n\n      env.window.addEventListener(\"resize\", listener)\n\n      return listener\n    })\n\n    return () => {\n      mediaQueryList.forEach((_, index) => {\n        env.window.removeEventListener(\"resize\", listenerList[index])\n      })\n    }\n  }, [query])\n\n  return matches\n}\n"],"file":"use-media-query.js"}